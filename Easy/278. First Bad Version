# The isBadVersion API is already defined for you.
# def isBadVersion(version: int) -> bool:

class Solution:
    def firstBadVersion(self, n: int) -> int:
        # BINARY SEARCH
        # if the element to be seached is the last, the loop runs forever so did this
        if isBadVersion(n) == True and isBadVersion(n-1)==False:
            return n

        # our low value, we will use n as high
        mini = 1
        while True:
            # using this instead of (mini+n)//2 because int limit 2,147,483,647, cant add more
            mid = mini+(n-mini)//2
            if isBadVersion(mid)==True:
                # checking previous element as our exit
                if isBadVersion(mid-1) == False:
                    return mid
                else:
                    mini=mid//2
                    n=mid
            else: 
                mini=mid
